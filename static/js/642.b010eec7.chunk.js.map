{"version":3,"file":"static/js/642.b010eec7.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/App.styled.js","redux/contacts/selectors.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Title = styled.h2`\r\n  margin-top: 20px;\r\n  font-family: sans-serif;\r\n  font-size: 30px;\r\n  line-height: 1.15;\r\n  font-weight: 700;\r\n  letter-spacing: 0.03em;\r\n  text-align: center;\r\n  color: #dcdcdc; \r\n`;","import { Title } from './Section.styled';\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </section>\r\n  );\r\n};","import styled from 'styled-components';\r\n\r\nexport const Label = styled.label`\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  line-height: 1.15;\r\n`;\r\n\r\nexport const FindInput = styled.input`\r\n  width: 95%;\r\n  display: flex;\r\n  border: 2px solid black;\r\n  margin: 10px auto;\r\n  padding: 15px;\r\n  font-size: 20px;\r\n  color: #dcdcdc; \r\n\r\n  &:focus-visible {\r\n    border-radius: 4px;\r\n    border: 3px solid lightblue;\r\n  }\r\n`;","import { Label, FindInput } from './Filter.styled';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { filterChange } from '../../redux/contacts/filterSlice';\r\n\r\nexport const Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const onWrite = e => {\r\n    dispatch(filterChange(e.currentTarget.value));\r\n  };\r\n\r\n  return (\r\n    <Label>\r\n      <FindInput\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        placeholder=\"Find contacts by name\"\r\n        onChange={onWrite}\r\n      />\r\n    </Label>\r\n  );\r\n};\r\n\r\nLabel.propTypes = {\r\n  filter: PropTypes.string,\r\n};","import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  font-size: 16px;\r\n  line-height: 1.15;\r\n  padding: 10px 0;\r\n  letter-spacing: 0.05em;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    flex-direction: row;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    font-size: 25px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    padding-left: 40px;\r\n    padding-right: 40px;\r\n    font-size: 32px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  box-shadow: inset 0px 0px 12px 3px #ffffff;\r\n  background: linear-gradient(to bottom, #ededed 5%, #dfdfdf 100%);\r\n  background-color: #ededed;\r\n  border-radius: 4px;\r\n  border: 2px solid #dcdcdc;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  color: #212121;\r\n  font-family: Arial;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  padding: 16px 16px;\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    background: linear-gradient(to bottom, #212121 5%, #ededed 100%);\r\n    background-color: #212121;\r\n    color: #ffffff;\r\n  }\r\n`;","import { List, Item, Button } from './ContactsList.styled';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/operations';\r\n\r\nexport const ContactsList = ({ contacts }) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <Item key={id}>\r\n            {name}: {number}\r\n            <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\r\n              Delete\r\n            </Button>\r\n          </Item>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      phone: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n};","import styled from 'styled-components';\r\nimport { Form as FormikForm, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\n\r\nexport const FormContact = styled(FormikForm)`\r\n  padding: 40px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color:rgb(81 62 34 / 64%);\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  width: 50%;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    flex-direction: row;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    padding-left: 16px;\r\n    padding-right: 16px;\r\n  }\r\n`;\r\n\r\nexport const ErrorText = styled(FormikErrorMessage)`\r\n  color: tomato;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  line-height: 1.15;\r\n  color: #dcdcdc; \r\n`;\r\n\r\nexport const Input = styled(Field)`\r\n  all: unset;\r\n  display: flex;\r\n  border: 2px solid black;\r\n  margin: 10px 0;\r\n  padding: 15px;\r\n  font-size: 20px;\r\n  color: #dcdcdc;\r\n\r\n  &:focus-visible {\r\n    border-radius: 4px;\r\n    border: 3px solid lightblue;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  box-shadow: inset 0px 0px 12px 3px #ffffff;\r\n  background: linear-gradient(to bottom, #ededed 5%, #dfdfdf 100%);\r\n  background-color: #ededed;\r\n  border-radius: 4px;\r\n  border: 2px solid #dcdcdc;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  color: #212121;\r\n  font-family: Arial;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  padding: 16px 37px;\r\n  text-decoration: none;\r\n  margin: 10px 0;\r\n\r\n  &:hover {\r\n    background: linear-gradient(to bottom, #212121 5%, #ededed 100%);\r\n    background-color: #212121;\r\n    color: #ffffff;\r\n  }\r\n`;","import { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport {\r\n  FormContact,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  ErrorText,\r\n} from './ContactForm.styled.js';\r\n\r\nconst nameValidate =\r\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\r\nconst phoneValidate = RegExp(\r\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{1,3}\\\\)[ \\\\-]*)|([0-9]{1,4})[ \\\\-]*)*?[0-9]{1,4}?[ \\\\-]*[0-9]{1,9}?$/\r\n);\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required()\r\n    .matches(\r\n      nameValidate,\r\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n    ),\r\n  phone: yup\r\n    .string()\r\n    .required()\r\n    .matches(\r\n      phoneValidate,\r\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\r\n    ),\r\n});\r\n\r\nconst initialValues = {\r\n  name: '',\r\n  phone: '',\r\n};\r\n\r\nexport const ContactForm = ({ handleSubmit }) => {\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={handleSubmit}\r\n      validationSchema={schema}\r\n    >\r\n      <FormContact autoComplete=\"off\">\r\n        <Label>\r\n          Name\r\n          <Input type=\"text\" name=\"name\"></Input>\r\n          <ErrorText component=\"div\" name=\"name\" />\r\n        </Label>\r\n        <Label>\r\n          Number\r\n          <Input type=\"tel\" name=\"phone\"></Input>\r\n          <ErrorText component=\"div\" name=\"phone\" />\r\n        </Label>\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </FormContact>\r\n    </Formik>\r\n  );\r\n};","import styled from 'styled-components';\r\n\r\nexport const Wrap = styled.div`\r\n  margin: 0 auto;\r\n  padding: 0 15px;\r\n`;","export const selectContacts = state => state.phonebook.contacts.items;\r\nexport const selectisLoading = state => state.phonebook.contacts.isLoading;\r\nexport const selectError = state => state.phonebook.contacts.error;\r\nexport const selectFilter = state => state.filter;\r\nexport const selectFilteredContacts = state => {\r\n  const contacts = selectContacts(state);\r\n  const filter = selectFilter(state);\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n};","import { Section } from '../components/Section/Section';\r\nimport { Filter } from '../components/Filter/Filter';\r\nimport { ContactsList } from '../components/ContactsList/ContactsList';\r\nimport { ContactForm } from '../components/ContactForm/ContactForm';\r\nimport { Wrap } from '../components/App.styled';\r\n//\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  selectContacts,\r\n  selectisLoading,\r\n  selectError,\r\n  selectFilteredContacts,\r\n} from '../redux/contacts/selectors';\r\nimport { fetchContacts, addContact } from '../redux/contacts/operations';\r\nimport { useEffect } from 'react';\r\n//\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(selectContacts);\r\n  const isLoading = useSelector(selectisLoading);\r\n  const error = useSelector(selectError);\r\n  const filter = useSelector(selectFilteredContacts);\r\n\r\n  const newContact = name => {\r\n    contacts.find(\r\n      contact => contact.name.toLowerCase() === name.name.toLowerCase()\r\n    )\r\n      ? alert(`${name.name} is already in contacts`)\r\n      : dispatch(addContact(name));\r\n  };\r\n\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    newContact(values);\r\n    resetForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Wrap>\r\n      <ContactForm handleSubmit={handleSubmit} />\r\n      <Filter />\r\n      <Section title={`Contacts list`}>\r\n        {isLoading && <p>Loading contacts...</p>}\r\n        {error && <p>{error}</p>}\r\n        {contacts.length > 0 && <ContactsList contacts={filter} />}\r\n      </Section>\r\n    </Wrap>\r\n  );\r\n}"],"names":["Title","styled","h2","Section","_ref","title","children","_jsxs","_jsx","Label","label","FindInput","input","Filter","dispatch","useDispatch","type","name","placeholder","onChange","e","filterChange","currentTarget","value","propTypes","filter","PropTypes","List","ul","Item","li","Button","button","ContactsList","contacts","map","_ref2","id","number","onClick","deleteContact","isRequired","phone","FormContact","FormikForm","ErrorText","div","FormikErrorMessage","Input","Field","phoneValidate","RegExp","schema","yup","shape","required","matches","initialValues","ContactForm","handleSubmit","Formik","onSubmit","validationSchema","autoComplete","component","Wrap","selectContacts","state","phonebook","items","selectisLoading","isLoading","selectError","error","selectFilteredContacts","selectFilter","contact","toLowerCase","includes","App","useSelector","useEffect","fetchContacts","values","resetForm","find","alert","addContact","length"],"sourceRoot":""}